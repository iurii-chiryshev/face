// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: detectionresult.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "detectionresult.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace flib {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* DetectionResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DetectionResult_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_detectionresult_2eproto() {
  protobuf_AddDesc_detectionresult_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "detectionresult.proto");
  GOOGLE_CHECK(file != NULL);
  DetectionResult_descriptor_ = file->message_type(0);
  static const int DetectionResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionResult, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionResult, mat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionResult, faces_),
  };
  DetectionResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DetectionResult_descriptor_,
      DetectionResult::default_instance_,
      DetectionResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DetectionResult));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_detectionresult_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DetectionResult_descriptor_, &DetectionResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_detectionresult_2eproto() {
  delete DetectionResult::default_instance_;
  delete DetectionResult_reflection_;
}

void protobuf_AddDesc_detectionresult_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::flib::proto::protobuf_AddDesc_common_2eproto();
  ::flib::proto::protobuf_AddDesc_timestamp_2eproto();
  ::flib::proto::protobuf_AddDesc_mat_2eproto();
  ::flib::proto::protobuf_AddDesc_face_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025detectionresult.proto\022\nflib.proto\032\014com"
    "mon.proto\032\017timestamp.proto\032\tmat.proto\032\nf"
    "ace.proto\"z\n\017DetectionResult\022(\n\ttimestam"
    "p\030\001 \002(\0132\025.flib.proto.Timestamp\022\034\n\003mat\030\002 "
    "\001(\0132\017.flib.proto.Mat\022\037\n\005faces\030\003 \003(\0132\020.fl"
    "ib.proto.Face", 213);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "detectionresult.proto", &protobuf_RegisterTypes);
  DetectionResult::default_instance_ = new DetectionResult();
  DetectionResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_detectionresult_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_detectionresult_2eproto {
  StaticDescriptorInitializer_detectionresult_2eproto() {
    protobuf_AddDesc_detectionresult_2eproto();
  }
} static_descriptor_initializer_detectionresult_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int DetectionResult::kTimestampFieldNumber;
const int DetectionResult::kMatFieldNumber;
const int DetectionResult::kFacesFieldNumber;
#endif  // !_MSC_VER

DetectionResult::DetectionResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flib.proto.DetectionResult)
}

void DetectionResult::InitAsDefaultInstance() {
  timestamp_ = const_cast< ::flib::proto::Timestamp*>(&::flib::proto::Timestamp::default_instance());
  mat_ = const_cast< ::flib::proto::Mat*>(&::flib::proto::Mat::default_instance());
}

DetectionResult::DetectionResult(const DetectionResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:flib.proto.DetectionResult)
}

void DetectionResult::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = NULL;
  mat_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DetectionResult::~DetectionResult() {
  // @@protoc_insertion_point(destructor:flib.proto.DetectionResult)
  SharedDtor();
}

void DetectionResult::SharedDtor() {
  if (this != default_instance_) {
    delete timestamp_;
    delete mat_;
  }
}

void DetectionResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetectionResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DetectionResult_descriptor_;
}

const DetectionResult& DetectionResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_detectionresult_2eproto();
  return *default_instance_;
}

DetectionResult* DetectionResult::default_instance_ = NULL;

DetectionResult* DetectionResult::New() const {
  return new DetectionResult;
}

void DetectionResult::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_timestamp()) {
      if (timestamp_ != NULL) timestamp_->::flib::proto::Timestamp::Clear();
    }
    if (has_mat()) {
      if (mat_ != NULL) mat_->::flib::proto::Mat::Clear();
    }
  }
  faces_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DetectionResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flib.proto.DetectionResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .flib.proto.Timestamp timestamp = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mat;
        break;
      }

      // optional .flib.proto.Mat mat = 2;
      case 2: {
        if (tag == 18) {
         parse_mat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_faces;
        break;
      }

      // repeated .flib.proto.Face faces = 3;
      case 3: {
        if (tag == 26) {
         parse_faces:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_faces()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_faces;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flib.proto.DetectionResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flib.proto.DetectionResult)
  return false;
#undef DO_
}

void DetectionResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flib.proto.DetectionResult)
  // required .flib.proto.Timestamp timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->timestamp(), output);
  }

  // optional .flib.proto.Mat mat = 2;
  if (has_mat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mat(), output);
  }

  // repeated .flib.proto.Face faces = 3;
  for (int i = 0; i < this->faces_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->faces(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flib.proto.DetectionResult)
}

::google::protobuf::uint8* DetectionResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flib.proto.DetectionResult)
  // required .flib.proto.Timestamp timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->timestamp(), target);
  }

  // optional .flib.proto.Mat mat = 2;
  if (has_mat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mat(), target);
  }

  // repeated .flib.proto.Face faces = 3;
  for (int i = 0; i < this->faces_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->faces(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flib.proto.DetectionResult)
  return target;
}

int DetectionResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .flib.proto.Timestamp timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->timestamp());
    }

    // optional .flib.proto.Mat mat = 2;
    if (has_mat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mat());
    }

  }
  // repeated .flib.proto.Face faces = 3;
  total_size += 1 * this->faces_size();
  for (int i = 0; i < this->faces_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->faces(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetectionResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DetectionResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DetectionResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DetectionResult::MergeFrom(const DetectionResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  faces_.MergeFrom(from.faces_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      mutable_timestamp()->::flib::proto::Timestamp::MergeFrom(from.timestamp());
    }
    if (from.has_mat()) {
      mutable_mat()->::flib::proto::Mat::MergeFrom(from.mat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DetectionResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectionResult::CopyFrom(const DetectionResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectionResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_timestamp()) {
    if (!this->timestamp().IsInitialized()) return false;
  }
  if (has_mat()) {
    if (!this->mat().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->faces())) return false;
  return true;
}

void DetectionResult::Swap(DetectionResult* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(mat_, other->mat_);
    faces_.Swap(&other->faces_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DetectionResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DetectionResult_descriptor_;
  metadata.reflection = DetectionResult_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace flib

// @@protoc_insertion_point(global_scope)

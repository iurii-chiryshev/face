// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mat.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mat.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace flib {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* Mat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mat_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mat_2eproto() {
  protobuf_AddDesc_mat_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mat.proto");
  GOOGLE_CHECK(file != NULL);
  Mat_descriptor_ = file->message_type(0);
  static const int Mat_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mat, depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mat, channels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mat, rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mat, cols_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mat, step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mat, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mat, encoded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mat, params_),
  };
  Mat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Mat_descriptor_,
      Mat::default_instance_,
      Mat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Mat));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mat_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Mat_descriptor_, &Mat::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mat_2eproto() {
  delete Mat::default_instance_;
  delete Mat_reflection_;
}

void protobuf_AddDesc_mat_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::flib::proto::protobuf_AddDesc_common_2eproto();
  ::flib::proto::protobuf_AddDesc_pair32i_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tmat.proto\022\nflib.proto\032\014common.proto\032\rp"
    "air32i.proto\"\233\001\n\003Mat\022\r\n\005depth\030\001 \002(\005\022\020\n\010c"
    "hannels\030\002 \002(\005\022\014\n\004rows\030\003 \002(\005\022\014\n\004cols\030\004 \002("
    "\005\022\014\n\004step\030\005 \002(\005\022\014\n\004data\030\006 \002(\014\022\026\n\007encoded"
    "\030\007 \001(\010:\005false\022#\n\006params\030\010 \003(\0132\023.flib.pro"
    "to.Pair32i", 210);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mat.proto", &protobuf_RegisterTypes);
  Mat::default_instance_ = new Mat();
  Mat::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mat_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mat_2eproto {
  StaticDescriptorInitializer_mat_2eproto() {
    protobuf_AddDesc_mat_2eproto();
  }
} static_descriptor_initializer_mat_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Mat::kDepthFieldNumber;
const int Mat::kChannelsFieldNumber;
const int Mat::kRowsFieldNumber;
const int Mat::kColsFieldNumber;
const int Mat::kStepFieldNumber;
const int Mat::kDataFieldNumber;
const int Mat::kEncodedFieldNumber;
const int Mat::kParamsFieldNumber;
#endif  // !_MSC_VER

Mat::Mat()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flib.proto.Mat)
}

void Mat::InitAsDefaultInstance() {
}

Mat::Mat(const Mat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:flib.proto.Mat)
}

void Mat::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  depth_ = 0;
  channels_ = 0;
  rows_ = 0;
  cols_ = 0;
  step_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encoded_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mat::~Mat() {
  // @@protoc_insertion_point(destructor:flib.proto.Mat)
  SharedDtor();
}

void Mat::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void Mat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mat_descriptor_;
}

const Mat& Mat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mat_2eproto();
  return *default_instance_;
}

Mat* Mat::default_instance_ = NULL;

Mat* Mat::New() const {
  return new Mat;
}

void Mat::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Mat*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(depth_, cols_);
    ZR_(step_, encoded_);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Mat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flib.proto.Mat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 depth = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &depth_)));
          set_has_depth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_channels;
        break;
      }

      // required int32 channels = 2;
      case 2: {
        if (tag == 16) {
         parse_channels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channels_)));
          set_has_channels();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_rows;
        break;
      }

      // required int32 rows = 3;
      case 3: {
        if (tag == 24) {
         parse_rows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rows_)));
          set_has_rows();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cols;
        break;
      }

      // required int32 cols = 4;
      case 4: {
        if (tag == 32) {
         parse_cols:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cols_)));
          set_has_cols();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_step;
        break;
      }

      // required int32 step = 5;
      case 5: {
        if (tag == 40) {
         parse_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &step_)));
          set_has_step();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_data;
        break;
      }

      // required bytes data = 6;
      case 6: {
        if (tag == 50) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_encoded;
        break;
      }

      // optional bool encoded = 7 [default = false];
      case 7: {
        if (tag == 56) {
         parse_encoded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encoded_)));
          set_has_encoded();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_params;
        break;
      }

      // repeated .flib.proto.Pair32i params = 8;
      case 8: {
        if (tag == 66) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_params()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_params;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flib.proto.Mat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flib.proto.Mat)
  return false;
#undef DO_
}

void Mat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flib.proto.Mat)
  // required int32 depth = 1;
  if (has_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->depth(), output);
  }

  // required int32 channels = 2;
  if (has_channels()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channels(), output);
  }

  // required int32 rows = 3;
  if (has_rows()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rows(), output);
  }

  // required int32 cols = 4;
  if (has_cols()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cols(), output);
  }

  // required int32 step = 5;
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->step(), output);
  }

  // required bytes data = 6;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->data(), output);
  }

  // optional bool encoded = 7 [default = false];
  if (has_encoded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->encoded(), output);
  }

  // repeated .flib.proto.Pair32i params = 8;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->params(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flib.proto.Mat)
}

::google::protobuf::uint8* Mat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flib.proto.Mat)
  // required int32 depth = 1;
  if (has_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->depth(), target);
  }

  // required int32 channels = 2;
  if (has_channels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channels(), target);
  }

  // required int32 rows = 3;
  if (has_rows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rows(), target);
  }

  // required int32 cols = 4;
  if (has_cols()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cols(), target);
  }

  // required int32 step = 5;
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->step(), target);
  }

  // required bytes data = 6;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->data(), target);
  }

  // optional bool encoded = 7 [default = false];
  if (has_encoded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->encoded(), target);
  }

  // repeated .flib.proto.Pair32i params = 8;
  for (int i = 0; i < this->params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->params(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flib.proto.Mat)
  return target;
}

int Mat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 depth = 1;
    if (has_depth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->depth());
    }

    // required int32 channels = 2;
    if (has_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channels());
    }

    // required int32 rows = 3;
    if (has_rows()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rows());
    }

    // required int32 cols = 4;
    if (has_cols()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cols());
    }

    // required int32 step = 5;
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->step());
    }

    // required bytes data = 6;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional bool encoded = 7 [default = false];
    if (has_encoded()) {
      total_size += 1 + 1;
    }

  }
  // repeated .flib.proto.Pair32i params = 8;
  total_size += 1 * this->params_size();
  for (int i = 0; i < this->params_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->params(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Mat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Mat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mat::MergeFrom(const Mat& from) {
  GOOGLE_CHECK_NE(&from, this);
  params_.MergeFrom(from.params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_depth()) {
      set_depth(from.depth());
    }
    if (from.has_channels()) {
      set_channels(from.channels());
    }
    if (from.has_rows()) {
      set_rows(from.rows());
    }
    if (from.has_cols()) {
      set_cols(from.cols());
    }
    if (from.has_step()) {
      set_step(from.step());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_encoded()) {
      set_encoded(from.encoded());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Mat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mat::CopyFrom(const Mat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mat::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->params())) return false;
  return true;
}

void Mat::Swap(Mat* other) {
  if (other != this) {
    std::swap(depth_, other->depth_);
    std::swap(channels_, other->channels_);
    std::swap(rows_, other->rows_);
    std::swap(cols_, other->cols_);
    std::swap(step_, other->step_);
    std::swap(data_, other->data_);
    std::swap(encoded_, other->encoded_);
    params_.Swap(&other->params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Mat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mat_descriptor_;
  metadata.reflection = Mat_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace flib

// @@protoc_insertion_point(global_scope)

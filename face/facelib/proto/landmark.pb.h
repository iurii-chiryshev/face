// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: landmark.proto

#ifndef PROTOBUF_landmark_2eproto__INCLUDED
#define PROTOBUF_landmark_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "point2i.pb.h"
// @@protoc_insertion_point(includes)

namespace flib {
namespace proto {

// Internal implementation detail -- do not call these.
void FACELIBSHARED_EXPORT protobuf_AddDesc_landmark_2eproto();
void protobuf_AssignDesc_landmark_2eproto();
void protobuf_ShutdownFile_landmark_2eproto();

class Landmark;

// ===================================================================

class FACELIBSHARED_EXPORT Landmark : public ::google::protobuf::Message {
 public:
  Landmark();
  virtual ~Landmark();

  Landmark(const Landmark& from);

  inline Landmark& operator=(const Landmark& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Landmark& default_instance();

  void Swap(Landmark* other);

  // implements Message ----------------------------------------------

  Landmark* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Landmark& from);
  void MergeFrom(const Landmark& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 idx = 1;
  inline bool has_idx() const;
  inline void clear_idx();
  static const int kIdxFieldNumber = 1;
  inline ::google::protobuf::int32 idx() const;
  inline void set_idx(::google::protobuf::int32 value);

  // required .flib.proto.Point2i point = 2;
  inline bool has_point() const;
  inline void clear_point();
  static const int kPointFieldNumber = 2;
  inline const ::flib::proto::Point2i& point() const;
  inline ::flib::proto::Point2i* mutable_point();
  inline ::flib::proto::Point2i* release_point();
  inline void set_allocated_point(::flib::proto::Point2i* point);

  // @@protoc_insertion_point(class_scope:flib.proto.Landmark)
 private:
  inline void set_has_idx();
  inline void clear_has_idx();
  inline void set_has_point();
  inline void clear_has_point();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::flib::proto::Point2i* point_;
  ::google::protobuf::int32 idx_;
  friend void FACELIBSHARED_EXPORT protobuf_AddDesc_landmark_2eproto();
  friend void protobuf_AssignDesc_landmark_2eproto();
  friend void protobuf_ShutdownFile_landmark_2eproto();

  void InitAsDefaultInstance();
  static Landmark* default_instance_;
};
// ===================================================================


// ===================================================================

// Landmark

// required int32 idx = 1;
inline bool Landmark::has_idx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Landmark::set_has_idx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Landmark::clear_has_idx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Landmark::clear_idx() {
  idx_ = 0;
  clear_has_idx();
}
inline ::google::protobuf::int32 Landmark::idx() const {
  // @@protoc_insertion_point(field_get:flib.proto.Landmark.idx)
  return idx_;
}
inline void Landmark::set_idx(::google::protobuf::int32 value) {
  set_has_idx();
  idx_ = value;
  // @@protoc_insertion_point(field_set:flib.proto.Landmark.idx)
}

// required .flib.proto.Point2i point = 2;
inline bool Landmark::has_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Landmark::set_has_point() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Landmark::clear_has_point() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Landmark::clear_point() {
  if (point_ != NULL) point_->::flib::proto::Point2i::Clear();
  clear_has_point();
}
inline const ::flib::proto::Point2i& Landmark::point() const {
  // @@protoc_insertion_point(field_get:flib.proto.Landmark.point)
  return point_ != NULL ? *point_ : *default_instance_->point_;
}
inline ::flib::proto::Point2i* Landmark::mutable_point() {
  set_has_point();
  if (point_ == NULL) point_ = new ::flib::proto::Point2i;
  // @@protoc_insertion_point(field_mutable:flib.proto.Landmark.point)
  return point_;
}
inline ::flib::proto::Point2i* Landmark::release_point() {
  clear_has_point();
  ::flib::proto::Point2i* temp = point_;
  point_ = NULL;
  return temp;
}
inline void Landmark::set_allocated_point(::flib::proto::Point2i* point) {
  delete point_;
  point_ = point;
  if (point) {
    set_has_point();
  } else {
    clear_has_point();
  }
  // @@protoc_insertion_point(field_set_allocated:flib.proto.Landmark.point)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace flib

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_landmark_2eproto__INCLUDED

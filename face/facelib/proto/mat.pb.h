// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mat.proto

#ifndef PROTOBUF_mat_2eproto__INCLUDED
#define PROTOBUF_mat_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "pair32i.pb.h"
// @@protoc_insertion_point(includes)

namespace flib {
namespace proto {

// Internal implementation detail -- do not call these.
void FACELIBSHARED_EXPORT protobuf_AddDesc_mat_2eproto();
void protobuf_AssignDesc_mat_2eproto();
void protobuf_ShutdownFile_mat_2eproto();

class Mat;

// ===================================================================

class FACELIBSHARED_EXPORT Mat : public ::google::protobuf::Message {
 public:
  Mat();
  virtual ~Mat();

  Mat(const Mat& from);

  inline Mat& operator=(const Mat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Mat& default_instance();

  void Swap(Mat* other);

  // implements Message ----------------------------------------------

  Mat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Mat& from);
  void MergeFrom(const Mat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 depth = 1;
  inline bool has_depth() const;
  inline void clear_depth();
  static const int kDepthFieldNumber = 1;
  inline ::google::protobuf::int32 depth() const;
  inline void set_depth(::google::protobuf::int32 value);

  // required int32 channels = 2;
  inline bool has_channels() const;
  inline void clear_channels();
  static const int kChannelsFieldNumber = 2;
  inline ::google::protobuf::int32 channels() const;
  inline void set_channels(::google::protobuf::int32 value);

  // required int32 rows = 3;
  inline bool has_rows() const;
  inline void clear_rows();
  static const int kRowsFieldNumber = 3;
  inline ::google::protobuf::int32 rows() const;
  inline void set_rows(::google::protobuf::int32 value);

  // required int32 cols = 4;
  inline bool has_cols() const;
  inline void clear_cols();
  static const int kColsFieldNumber = 4;
  inline ::google::protobuf::int32 cols() const;
  inline void set_cols(::google::protobuf::int32 value);

  // required int32 step = 5;
  inline bool has_step() const;
  inline void clear_step();
  static const int kStepFieldNumber = 5;
  inline ::google::protobuf::int32 step() const;
  inline void set_step(::google::protobuf::int32 value);

  // required bytes data = 6;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 6;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional bool encoded = 7 [default = false];
  inline bool has_encoded() const;
  inline void clear_encoded();
  static const int kEncodedFieldNumber = 7;
  inline bool encoded() const;
  inline void set_encoded(bool value);

  // repeated .flib.proto.Pair32i params = 8;
  inline int params_size() const;
  inline void clear_params();
  static const int kParamsFieldNumber = 8;
  inline const ::flib::proto::Pair32i& params(int index) const;
  inline ::flib::proto::Pair32i* mutable_params(int index);
  inline ::flib::proto::Pair32i* add_params();
  inline const ::google::protobuf::RepeatedPtrField< ::flib::proto::Pair32i >&
      params() const;
  inline ::google::protobuf::RepeatedPtrField< ::flib::proto::Pair32i >*
      mutable_params();

  // @@protoc_insertion_point(class_scope:flib.proto.Mat)
 private:
  inline void set_has_depth();
  inline void clear_has_depth();
  inline void set_has_channels();
  inline void clear_has_channels();
  inline void set_has_rows();
  inline void clear_has_rows();
  inline void set_has_cols();
  inline void clear_has_cols();
  inline void set_has_step();
  inline void clear_has_step();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_encoded();
  inline void clear_has_encoded();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 depth_;
  ::google::protobuf::int32 channels_;
  ::google::protobuf::int32 rows_;
  ::google::protobuf::int32 cols_;
  ::std::string* data_;
  ::google::protobuf::int32 step_;
  bool encoded_;
  ::google::protobuf::RepeatedPtrField< ::flib::proto::Pair32i > params_;
  friend void FACELIBSHARED_EXPORT protobuf_AddDesc_mat_2eproto();
  friend void protobuf_AssignDesc_mat_2eproto();
  friend void protobuf_ShutdownFile_mat_2eproto();

  void InitAsDefaultInstance();
  static Mat* default_instance_;
};
// ===================================================================


// ===================================================================

// Mat

// required int32 depth = 1;
inline bool Mat::has_depth() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Mat::set_has_depth() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Mat::clear_has_depth() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Mat::clear_depth() {
  depth_ = 0;
  clear_has_depth();
}
inline ::google::protobuf::int32 Mat::depth() const {
  // @@protoc_insertion_point(field_get:flib.proto.Mat.depth)
  return depth_;
}
inline void Mat::set_depth(::google::protobuf::int32 value) {
  set_has_depth();
  depth_ = value;
  // @@protoc_insertion_point(field_set:flib.proto.Mat.depth)
}

// required int32 channels = 2;
inline bool Mat::has_channels() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Mat::set_has_channels() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Mat::clear_has_channels() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Mat::clear_channels() {
  channels_ = 0;
  clear_has_channels();
}
inline ::google::protobuf::int32 Mat::channels() const {
  // @@protoc_insertion_point(field_get:flib.proto.Mat.channels)
  return channels_;
}
inline void Mat::set_channels(::google::protobuf::int32 value) {
  set_has_channels();
  channels_ = value;
  // @@protoc_insertion_point(field_set:flib.proto.Mat.channels)
}

// required int32 rows = 3;
inline bool Mat::has_rows() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Mat::set_has_rows() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Mat::clear_has_rows() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Mat::clear_rows() {
  rows_ = 0;
  clear_has_rows();
}
inline ::google::protobuf::int32 Mat::rows() const {
  // @@protoc_insertion_point(field_get:flib.proto.Mat.rows)
  return rows_;
}
inline void Mat::set_rows(::google::protobuf::int32 value) {
  set_has_rows();
  rows_ = value;
  // @@protoc_insertion_point(field_set:flib.proto.Mat.rows)
}

// required int32 cols = 4;
inline bool Mat::has_cols() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Mat::set_has_cols() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Mat::clear_has_cols() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Mat::clear_cols() {
  cols_ = 0;
  clear_has_cols();
}
inline ::google::protobuf::int32 Mat::cols() const {
  // @@protoc_insertion_point(field_get:flib.proto.Mat.cols)
  return cols_;
}
inline void Mat::set_cols(::google::protobuf::int32 value) {
  set_has_cols();
  cols_ = value;
  // @@protoc_insertion_point(field_set:flib.proto.Mat.cols)
}

// required int32 step = 5;
inline bool Mat::has_step() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Mat::set_has_step() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Mat::clear_has_step() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Mat::clear_step() {
  step_ = 0;
  clear_has_step();
}
inline ::google::protobuf::int32 Mat::step() const {
  // @@protoc_insertion_point(field_get:flib.proto.Mat.step)
  return step_;
}
inline void Mat::set_step(::google::protobuf::int32 value) {
  set_has_step();
  step_ = value;
  // @@protoc_insertion_point(field_set:flib.proto.Mat.step)
}

// required bytes data = 6;
inline bool Mat::has_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Mat::set_has_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Mat::clear_has_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Mat::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& Mat::data() const {
  // @@protoc_insertion_point(field_get:flib.proto.Mat.data)
  return *data_;
}
inline void Mat::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:flib.proto.Mat.data)
}
inline void Mat::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:flib.proto.Mat.data)
}
inline void Mat::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flib.proto.Mat.data)
}
inline ::std::string* Mat::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:flib.proto.Mat.data)
  return data_;
}
inline ::std::string* Mat::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Mat::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:flib.proto.Mat.data)
}

// optional bool encoded = 7 [default = false];
inline bool Mat::has_encoded() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Mat::set_has_encoded() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Mat::clear_has_encoded() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Mat::clear_encoded() {
  encoded_ = false;
  clear_has_encoded();
}
inline bool Mat::encoded() const {
  // @@protoc_insertion_point(field_get:flib.proto.Mat.encoded)
  return encoded_;
}
inline void Mat::set_encoded(bool value) {
  set_has_encoded();
  encoded_ = value;
  // @@protoc_insertion_point(field_set:flib.proto.Mat.encoded)
}

// repeated .flib.proto.Pair32i params = 8;
inline int Mat::params_size() const {
  return params_.size();
}
inline void Mat::clear_params() {
  params_.Clear();
}
inline const ::flib::proto::Pair32i& Mat::params(int index) const {
  // @@protoc_insertion_point(field_get:flib.proto.Mat.params)
  return params_.Get(index);
}
inline ::flib::proto::Pair32i* Mat::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:flib.proto.Mat.params)
  return params_.Mutable(index);
}
inline ::flib::proto::Pair32i* Mat::add_params() {
  // @@protoc_insertion_point(field_add:flib.proto.Mat.params)
  return params_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::flib::proto::Pair32i >&
Mat::params() const {
  // @@protoc_insertion_point(field_list:flib.proto.Mat.params)
  return params_;
}
inline ::google::protobuf::RepeatedPtrField< ::flib::proto::Pair32i >*
Mat::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:flib.proto.Mat.params)
  return &params_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace flib

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mat_2eproto__INCLUDED

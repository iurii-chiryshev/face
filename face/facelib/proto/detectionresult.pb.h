// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: detectionresult.proto

#ifndef PROTOBUF_detectionresult_2eproto__INCLUDED
#define PROTOBUF_detectionresult_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "timestamp.pb.h"
#include "mat.pb.h"
#include "face.pb.h"
// @@protoc_insertion_point(includes)

namespace flib {
namespace proto {

// Internal implementation detail -- do not call these.
void FACELIBSHARED_EXPORT protobuf_AddDesc_detectionresult_2eproto();
void protobuf_AssignDesc_detectionresult_2eproto();
void protobuf_ShutdownFile_detectionresult_2eproto();

class DetectionResult;

// ===================================================================

class FACELIBSHARED_EXPORT DetectionResult : public ::google::protobuf::Message {
 public:
  DetectionResult();
  virtual ~DetectionResult();

  DetectionResult(const DetectionResult& from);

  inline DetectionResult& operator=(const DetectionResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DetectionResult& default_instance();

  void Swap(DetectionResult* other);

  // implements Message ----------------------------------------------

  DetectionResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DetectionResult& from);
  void MergeFrom(const DetectionResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .flib.proto.Timestamp timestamp = 1;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline const ::flib::proto::Timestamp& timestamp() const;
  inline ::flib::proto::Timestamp* mutable_timestamp();
  inline ::flib::proto::Timestamp* release_timestamp();
  inline void set_allocated_timestamp(::flib::proto::Timestamp* timestamp);

  // optional .flib.proto.Mat mat = 2;
  inline bool has_mat() const;
  inline void clear_mat();
  static const int kMatFieldNumber = 2;
  inline const ::flib::proto::Mat& mat() const;
  inline ::flib::proto::Mat* mutable_mat();
  inline ::flib::proto::Mat* release_mat();
  inline void set_allocated_mat(::flib::proto::Mat* mat);

  // repeated .flib.proto.Face faces = 3;
  inline int faces_size() const;
  inline void clear_faces();
  static const int kFacesFieldNumber = 3;
  inline const ::flib::proto::Face& faces(int index) const;
  inline ::flib::proto::Face* mutable_faces(int index);
  inline ::flib::proto::Face* add_faces();
  inline const ::google::protobuf::RepeatedPtrField< ::flib::proto::Face >&
      faces() const;
  inline ::google::protobuf::RepeatedPtrField< ::flib::proto::Face >*
      mutable_faces();

  // @@protoc_insertion_point(class_scope:flib.proto.DetectionResult)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_mat();
  inline void clear_has_mat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::flib::proto::Timestamp* timestamp_;
  ::flib::proto::Mat* mat_;
  ::google::protobuf::RepeatedPtrField< ::flib::proto::Face > faces_;
  friend void FACELIBSHARED_EXPORT protobuf_AddDesc_detectionresult_2eproto();
  friend void protobuf_AssignDesc_detectionresult_2eproto();
  friend void protobuf_ShutdownFile_detectionresult_2eproto();

  void InitAsDefaultInstance();
  static DetectionResult* default_instance_;
};
// ===================================================================


// ===================================================================

// DetectionResult

// required .flib.proto.Timestamp timestamp = 1;
inline bool DetectionResult::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DetectionResult::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DetectionResult::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DetectionResult::clear_timestamp() {
  if (timestamp_ != NULL) timestamp_->::flib::proto::Timestamp::Clear();
  clear_has_timestamp();
}
inline const ::flib::proto::Timestamp& DetectionResult::timestamp() const {
  // @@protoc_insertion_point(field_get:flib.proto.DetectionResult.timestamp)
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
inline ::flib::proto::Timestamp* DetectionResult::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == NULL) timestamp_ = new ::flib::proto::Timestamp;
  // @@protoc_insertion_point(field_mutable:flib.proto.DetectionResult.timestamp)
  return timestamp_;
}
inline ::flib::proto::Timestamp* DetectionResult::release_timestamp() {
  clear_has_timestamp();
  ::flib::proto::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline void DetectionResult::set_allocated_timestamp(::flib::proto::Timestamp* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:flib.proto.DetectionResult.timestamp)
}

// optional .flib.proto.Mat mat = 2;
inline bool DetectionResult::has_mat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DetectionResult::set_has_mat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DetectionResult::clear_has_mat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DetectionResult::clear_mat() {
  if (mat_ != NULL) mat_->::flib::proto::Mat::Clear();
  clear_has_mat();
}
inline const ::flib::proto::Mat& DetectionResult::mat() const {
  // @@protoc_insertion_point(field_get:flib.proto.DetectionResult.mat)
  return mat_ != NULL ? *mat_ : *default_instance_->mat_;
}
inline ::flib::proto::Mat* DetectionResult::mutable_mat() {
  set_has_mat();
  if (mat_ == NULL) mat_ = new ::flib::proto::Mat;
  // @@protoc_insertion_point(field_mutable:flib.proto.DetectionResult.mat)
  return mat_;
}
inline ::flib::proto::Mat* DetectionResult::release_mat() {
  clear_has_mat();
  ::flib::proto::Mat* temp = mat_;
  mat_ = NULL;
  return temp;
}
inline void DetectionResult::set_allocated_mat(::flib::proto::Mat* mat) {
  delete mat_;
  mat_ = mat;
  if (mat) {
    set_has_mat();
  } else {
    clear_has_mat();
  }
  // @@protoc_insertion_point(field_set_allocated:flib.proto.DetectionResult.mat)
}

// repeated .flib.proto.Face faces = 3;
inline int DetectionResult::faces_size() const {
  return faces_.size();
}
inline void DetectionResult::clear_faces() {
  faces_.Clear();
}
inline const ::flib::proto::Face& DetectionResult::faces(int index) const {
  // @@protoc_insertion_point(field_get:flib.proto.DetectionResult.faces)
  return faces_.Get(index);
}
inline ::flib::proto::Face* DetectionResult::mutable_faces(int index) {
  // @@protoc_insertion_point(field_mutable:flib.proto.DetectionResult.faces)
  return faces_.Mutable(index);
}
inline ::flib::proto::Face* DetectionResult::add_faces() {
  // @@protoc_insertion_point(field_add:flib.proto.DetectionResult.faces)
  return faces_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::flib::proto::Face >&
DetectionResult::faces() const {
  // @@protoc_insertion_point(field_list:flib.proto.DetectionResult.faces)
  return faces_;
}
inline ::google::protobuf::RepeatedPtrField< ::flib::proto::Face >*
DetectionResult::mutable_faces() {
  // @@protoc_insertion_point(field_mutable_list:flib.proto.DetectionResult.faces)
  return &faces_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace flib

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_detectionresult_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: face.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "face.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace flib {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* Face_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Face_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_face_2eproto() {
  protobuf_AddDesc_face_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "face.proto");
  GOOGLE_CHECK(file != NULL);
  Face_descriptor_ = file->message_type(0);
  static const int Face_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Face, track_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Face, rect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Face, landmarks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Face, mat_),
  };
  Face_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Face_descriptor_,
      Face::default_instance_,
      Face_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Face, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Face, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Face));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_face_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Face_descriptor_, &Face::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_face_2eproto() {
  delete Face::default_instance_;
  delete Face_reflection_;
}

void protobuf_AddDesc_face_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::flib::proto::protobuf_AddDesc_common_2eproto();
  ::flib::proto::protobuf_AddDesc_rect_2eproto();
  ::flib::proto::protobuf_AddDesc_landmark_2eproto();
  ::flib::proto::protobuf_AddDesc_mat_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nface.proto\022\nflib.proto\032\014common.proto\032\n"
    "rect.proto\032\016landmark.proto\032\tmat.proto\"\201\001"
    "\n\004Face\022\022\n\ntrack_uuid\030\001 \001(\t\022\036\n\004rect\030\002 \002(\013"
    "2\020.flib.proto.Rect\022\'\n\tlandmarks\030\003 \003(\0132\024."
    "flib.proto.Landmark\022\034\n\003mat\030\004 \001(\0132\017.flib."
    "proto.Mat", 209);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "face.proto", &protobuf_RegisterTypes);
  Face::default_instance_ = new Face();
  Face::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_face_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_face_2eproto {
  StaticDescriptorInitializer_face_2eproto() {
    protobuf_AddDesc_face_2eproto();
  }
} static_descriptor_initializer_face_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Face::kTrackUuidFieldNumber;
const int Face::kRectFieldNumber;
const int Face::kLandmarksFieldNumber;
const int Face::kMatFieldNumber;
#endif  // !_MSC_VER

Face::Face()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flib.proto.Face)
}

void Face::InitAsDefaultInstance() {
  rect_ = const_cast< ::flib::proto::Rect*>(&::flib::proto::Rect::default_instance());
  mat_ = const_cast< ::flib::proto::Mat*>(&::flib::proto::Mat::default_instance());
}

Face::Face(const Face& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:flib.proto.Face)
}

void Face::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  track_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rect_ = NULL;
  mat_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Face::~Face() {
  // @@protoc_insertion_point(destructor:flib.proto.Face)
  SharedDtor();
}

void Face::SharedDtor() {
  if (track_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete track_uuid_;
  }
  if (this != default_instance_) {
    delete rect_;
    delete mat_;
  }
}

void Face::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Face::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Face_descriptor_;
}

const Face& Face::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_face_2eproto();
  return *default_instance_;
}

Face* Face::default_instance_ = NULL;

Face* Face::New() const {
  return new Face;
}

void Face::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    if (has_track_uuid()) {
      if (track_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        track_uuid_->clear();
      }
    }
    if (has_rect()) {
      if (rect_ != NULL) rect_->::flib::proto::Rect::Clear();
    }
    if (has_mat()) {
      if (mat_ != NULL) mat_->::flib::proto::Mat::Clear();
    }
  }
  landmarks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Face::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flib.proto.Face)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string track_uuid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_track_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->track_uuid().data(), this->track_uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "track_uuid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_rect;
        break;
      }

      // required .flib.proto.Rect rect = 2;
      case 2: {
        if (tag == 18) {
         parse_rect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rect()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_landmarks;
        break;
      }

      // repeated .flib.proto.Landmark landmarks = 3;
      case 3: {
        if (tag == 26) {
         parse_landmarks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_landmarks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_landmarks;
        if (input->ExpectTag(34)) goto parse_mat;
        break;
      }

      // optional .flib.proto.Mat mat = 4;
      case 4: {
        if (tag == 34) {
         parse_mat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flib.proto.Face)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flib.proto.Face)
  return false;
#undef DO_
}

void Face::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flib.proto.Face)
  // optional string track_uuid = 1;
  if (has_track_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->track_uuid().data(), this->track_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "track_uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->track_uuid(), output);
  }

  // required .flib.proto.Rect rect = 2;
  if (has_rect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rect(), output);
  }

  // repeated .flib.proto.Landmark landmarks = 3;
  for (int i = 0; i < this->landmarks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->landmarks(i), output);
  }

  // optional .flib.proto.Mat mat = 4;
  if (has_mat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->mat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flib.proto.Face)
}

::google::protobuf::uint8* Face::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flib.proto.Face)
  // optional string track_uuid = 1;
  if (has_track_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->track_uuid().data(), this->track_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "track_uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->track_uuid(), target);
  }

  // required .flib.proto.Rect rect = 2;
  if (has_rect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rect(), target);
  }

  // repeated .flib.proto.Landmark landmarks = 3;
  for (int i = 0; i < this->landmarks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->landmarks(i), target);
  }

  // optional .flib.proto.Mat mat = 4;
  if (has_mat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->mat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flib.proto.Face)
  return target;
}

int Face::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string track_uuid = 1;
    if (has_track_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->track_uuid());
    }

    // required .flib.proto.Rect rect = 2;
    if (has_rect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rect());
    }

    // optional .flib.proto.Mat mat = 4;
    if (has_mat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mat());
    }

  }
  // repeated .flib.proto.Landmark landmarks = 3;
  total_size += 1 * this->landmarks_size();
  for (int i = 0; i < this->landmarks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->landmarks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Face::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Face* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Face*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Face::MergeFrom(const Face& from) {
  GOOGLE_CHECK_NE(&from, this);
  landmarks_.MergeFrom(from.landmarks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_track_uuid()) {
      set_track_uuid(from.track_uuid());
    }
    if (from.has_rect()) {
      mutable_rect()->::flib::proto::Rect::MergeFrom(from.rect());
    }
    if (from.has_mat()) {
      mutable_mat()->::flib::proto::Mat::MergeFrom(from.mat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Face::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Face::CopyFrom(const Face& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Face::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (has_rect()) {
    if (!this->rect().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->landmarks())) return false;
  if (has_mat()) {
    if (!this->mat().IsInitialized()) return false;
  }
  return true;
}

void Face::Swap(Face* other) {
  if (other != this) {
    std::swap(track_uuid_, other->track_uuid_);
    std::swap(rect_, other->rect_);
    landmarks_.Swap(&other->landmarks_);
    std::swap(mat_, other->mat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Face::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Face_descriptor_;
  metadata.reflection = Face_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace flib

// @@protoc_insertion_point(global_scope)
